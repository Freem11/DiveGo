import './App.scss';
import { useState, useEffect, useLayoutEffect } from 'react';
import { supabase } from './supabase';
import AuthenticationPage from './components/authentication';
import LoadingScreen from './LoadingScreen';
import { getMostRecentPhoto } from './supabaseCalls/photoSupabaseCalls';
import {
  sessionCheck,
  sessionRefresh,
} from './supabaseCalls/authenticateSupabaseCalls';
import { AppContextProvider } from './components/contexts/appContextProvider';
import { CoordsContext } from './components/contexts/mapCoordsContext';
import { SessionContext } from './components/contexts/sessionContext';
import { toast, ToastContainer } from 'react-toastify';
import Router from './router';
// DiveLocker

function App() {
  const [appIsReady, setAppIsReady] = useState(false);
  const [mapCoords, setMapCoords] = useState([49.316666, -123.066666]);
  const [activeSession, setActiveSession] = useState(null);

  useEffect(() => {
    async function getUserData() {
      await supabase.auth.getSession().then((value) => {
        localStorage.setItem('token', JSON.stringify(value.data.session));
        setActiveSession(value.data.session);
      });
    }
    getUserData();
  }, []);

  const handleStartup = async () => {
    try {
      const valuless = localStorage.getItem('token');
      if (valuless) {
        const value = JSON.parse(valuless);
        if (value && value.session) {
          if (value.session.refresh_token) {
            let newSession = await sessionRefresh(
              value.session.refresh_token,
            );
            setActiveSession(newSession);
          }
        }
      }
      await sessionCheck();
      localStorage.removeItem('token');
    } catch (error) {
      console.log('no dice:', error);
    }

    const photoLocation = await getMostRecentPhoto();
    if (photoLocation) {
      setMapCoords([photoLocation[0].latitude, photoLocation[0].longitude]);
      setAppIsReady(true);
    }
  };

  useLayoutEffect(() => {
    handleStartup();
  }, []);


  useEffect(() => {
    // This kind of urls are generated by authentication provider(eg. password reset functionality)
    // https://localhost:3000/#error=access_denied&error_code=otp_expired&error_description=Email+link+is+invalid+or+has+expired
    const urlParams = new URLSearchParams(window.location.hash);
    if (urlParams.get('error_code')) {
      setTimeout(() => {
        toast.error('This link is invalid or has expired. Please try again.');
      }, 1000);
    }
  }, []);

  if (!appIsReady) {
    return <LoadingScreen />;
  }

  return (
    <div className="App">
      <ToastContainer autoClose={10000} />

      <AppContextProvider>
        <CoordsContext.Provider value={{ mapCoords, setMapCoords }}>
          <SessionContext.Provider value={{ activeSession, setActiveSession }}>
            { !activeSession ? <AuthenticationPage /> : <Router /> }
          </SessionContext.Provider>
        </CoordsContext.Provider>
      </AppContextProvider>
    </div>
  );
}

export default App;
